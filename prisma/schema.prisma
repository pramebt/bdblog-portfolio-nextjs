// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
}

enum ProjectType {
  PERSONAL
  PROFESSIONAL
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  password      String
  name          String?
  role          Role      @default(ADMIN)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // NextAuth fields
  accounts      Account[]
  sessions      Session[]npm

  posts    Post[]
  projects Project[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Post {
  id          String   @id @default(cuid())
  title       String
  slug        String   @unique
  content     String   @db.Text
  excerpt     String?
  coverImage  String?
  published   Boolean  @default(false)
  tags        String[] // Array of tag names
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  authorId    String

  author User @relation(fields: [authorId], references: [id], onDelete: Cascade)
}

model Project {
  id          String      @id @default(cuid())
  title       String
  slug        String      @unique
  description String      @db.Text
  coverImage  String?
  images      String[] 
  githubUrl   String?
  liveUrl     String?
  type        ProjectType @default(PERSONAL)
  published   Boolean     @default(false)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  authorId    String

  author User @relation(fields: [authorId], references: [id], onDelete: Cascade)
}
